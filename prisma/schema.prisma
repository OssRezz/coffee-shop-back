// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("regions")
}

model ProductType {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("product_types")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  productTypeId Int      @map("product_type_id")
  regionId      Int      @map("region_id")
  description   String   @db.Text
  price         Decimal  @db.Decimal(10, 3)
  image         String?
  status        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  productType ProductType  @relation(fields: [productTypeId], references: [id])
  region      Region       @relation(fields: [regionId], references: [id])
  inventory   Inventory?
  entries     Entry[]
  SaleDetail  SaleDetail[]

  @@map("products")
}

model Inventory {
  id        Int      @id @default(autoincrement())
  productId Int      @unique @map("product_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])

  @@map("inventories")
}

model Entry {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])

  @@map("entries")
}

model Customer {
  id             Int           @id @default(autoincrement())
  documentNumber String        @unique @map("document_number")
  name           String
  email          String        @unique
  cellphone      String
  transactions   Transaction[]

  @@map("customers")
}

enum TransactionStatus {
  PENDING
  APPROVED
  DECLINED
  VOIDED
  ERROR
}

model Transaction {
  id            Int               @id @default(autoincrement())
  customerId    Int               @map("customer_id")
  transactionId String            @unique
  reference     String
  status        TransactionStatus
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  sale          Sale[]

  customer Customer @relation(fields: [customerId], references: [id])

  @@map("transactions")
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

model Sale {
  id            Int        @id @default(autoincrement())
  transactionId Int?       @map("transaction_id")
  address       String
  totalAmount   Decimal    @map("total_amount") @db.Decimal(10, 2)
  status        SaleStatus @default(PENDING)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  transaction Transaction? @relation(fields: [transactionId], references: [id])
  details     SaleDetail[]

  @@map("sales")
}

model SaleDetail {
  id        Int     @id @default(autoincrement())
  saleId    Int     @map("sale_id")
  productId Int     @map("product_id")
  price     Decimal @db.Decimal(10, 2)
  quantity  Int

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_details")
}
